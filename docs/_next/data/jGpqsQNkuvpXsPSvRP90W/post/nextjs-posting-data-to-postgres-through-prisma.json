{"pageProps":{"frontmatter":{"title":"Next.js posting data to Postgres through Prisma","metaTitle":"Next.js posting data to Postgres through Prisma","metaDesc":"Posting data to Postgres using Prisma in Next.js","socialImage":"images/27-10-2021.jpg","date":"2021-10-27","tags":["nextjs","prisma"]},"content":"\r\nHi everyone! In the past couple of articles, we have been looking at Prisma and Postgres databases.\r\n\r\nIn this article, I will create a Next.js app that can post data to a Postgres database.\r\n\r\nWhat we'll be building:\r\n\r\n- User signs in with Spotify\r\n- User loads their playlists from Spotify\r\n- User can sync one of the playlists to our Postgres database\r\n\r\nIt will look like this:\r\n\r\n<!-- ![Next.js posting data to Postgres through Prisma](https://cdn.hashnode.com/res/hashnode/image/upload/v1634477800714/AYIILKoPa.gif) -->\r\n<video autoplay loop muted playsinline>\r\n  <source src=\"https://res.cloudinary.com/daily-dev-tips/video/upload/q_auto/prisma-post_ocdqqw.webm\" type=\"video/webm\" />\r\n  <source src=\"https://res.cloudinary.com/daily-dev-tips/video/upload/q_auto/prisma-post_galhvt.mp4\" type=\"video/mp4\" />\r\n</video>\r\n\r\n## Setting up the starting point\r\n\r\nI'm going to use the [Spotify login example](https://daily-dev-tips.com/posts/retrieving-a-persons-spotify-playlist-in-nextjs/) we made yesterday as the starting point for today's article.\r\n\r\nIf you want to follow along, download it from [GitHub](https://github.com/rebelchris/next-spotify-login) here.\r\n\r\nThe first thing we need to do is add the Prisma dependencies to our application.\r\n\r\n```bash\r\nnpm i -D prisma\r\nnpm i @prisma/client\r\n```\r\n\r\nThen we need to initialize the Prisma client.\r\n\r\n```bash\r\nnpx prisma init\r\n```\r\n\r\nThis will generate the Prisma folder and add a database URL to our `.env` file.\r\n\r\nOpen up the `.env` file and paste your [Postgres database URL](https://daily-dev-tips.com/posts/setting-up-a-free-postgresql-database-on-heroku/).\r\n\r\n## Set up the database\r\n\r\nThe next thing we need to do is define a schema for our playlist. Open the `prisma/schema.prisma` file and add the following schema at the bottom.\r\n\r\n```js\r\nmodel Playlist {\r\n  id           Int @default(autoincrement()) @id\r\n  title        String\r\n  image        String?\r\n  uri          String @unique\r\n  addedBy      String\r\n}\r\n```\r\n\r\nFrom here, we need to build our database.\r\n\r\n```bash\r\nnpx prisma db push\r\n```\r\n\r\nAs well as generate the local schema:\r\n\r\n```bash\r\nnpx prisma generate\r\n```\r\n\r\n## Creating an API endpoint to post our entity\r\n\r\nWe already have a `playlists` endpoint so let's leverage that one but modify it to accept `POST` requests.\r\n\r\nOpen the `pages/api/playlists.js` file and start by importing the Prisma requirements.\r\n\r\n```js\r\nimport { PrismaClient } from '@prisma/client';\r\nconst prisma = new PrismaClient();\r\n```\r\n\r\nNow let's modify the handler to do something on `POST` and `GET`.\r\n\r\n```js\r\nconst handler = async (req, res) => {\r\n  const {\r\n    token: { accessToken, email },\r\n  } = await getSession({ req });\r\n  if (req.method === 'POST') {\r\n    // Do post stuff\r\n  } else if (req.method === 'GET') {\r\n    const response = await getUsersPlaylists(accessToken);\r\n    const { items } = await response.json();\r\n    return res.status(200).json({ items });\r\n  }\r\n  res.end();\r\n};\r\n```\r\n\r\nAs for the `POST` section, we want to extract the correct data from our post query and create a new object to send to our database.\r\n\r\n```js\r\nif (req.method === 'POST') {\r\n  const { body } = req;\r\n  const {\r\n    name,\r\n    images: { 0: { url } = {} },\r\n    uri,\r\n  } = JSON.parse(body);\r\n  const playlistItem = {\r\n    title: name,\r\n    image: url,\r\n    uri: uri,\r\n    addedBy: email,\r\n  };\r\n}\r\n```\r\n\r\nThen all we need to do is call our Prisma client and use the `create` function to insert our item.\r\n\r\n```js\r\nconst playlist = await prisma.playlist.create({\r\n  data: playlistItem,\r\n});\r\nreturn res.status(200).json(playlist);\r\n```\r\n\r\nAnd that's it, if we now perform a `POST` request to this API endpoint, our playlist will be added.\r\n\r\n## Creating the frontend action\r\n\r\nFor the frontend part, let's open up our `index.js` page.\r\nInside the map function add a button with a click action like so:\r\n\r\n```js\r\n{\r\n  list.map((item) => (\r\n    <div key={item.id}>\r\n      <h1>{item.name}</h1>\r\n      <img src={item.images[0]?.url} width='100' />\r\n      <br />\r\n      <button onClick={() => saveToDatabase(item)}>Save in database</button>\r\n    </div>\r\n  ));\r\n}\r\n```\r\n\r\nNow let's go ahead and make this `saveToDatabase` function.\r\n\r\n```js\r\nconst saveToDatabase = async (item) => {\r\n  const res = await fetch('api/playlists', {\r\n    method: 'POST',\r\n    body: JSON.stringify(item),\r\n  });\r\n  const data = await res.json();\r\n};\r\n```\r\n\r\nIn our case, we are just passing the API request but not doing anything with the return data yet.\r\n\r\nThis is perfect as once we click the button, it will call this function and post it to our API.\r\nWhich in return adds a new entry in our database.\r\n\r\n![Database entries from Prisma Next.js](https://cdn.hashnode.com/res/hashnode/image/upload/v1634477581356/AS1_2nxU7.png)\r\n\r\nYou can also find the complete code on [GitHub](https://github.com/rebelchris/next-spotify-login/tree/post-data).\r\n\r\n### Thank you for reading, and let's connect!\r\n\r\nThank you for reading my blog. Feel free to subscribe to my email newsletter and connect on [Facebook](https://www.facebook.com/DailyDevTipsBlog) or [Twitter](https://twitter.com/DailyDevTips1)\r\n"},"__N_SSG":true}